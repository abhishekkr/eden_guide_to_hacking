
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[+] Hacker's Aim
 |
 |[+] Check for 'Robust-ness' of a system,
 |  finding 'Vulnerability' in it...
 |  & creating an 'Exploit' for vulnerability.
 |  To prepare a 'Threat Model' for 'Target' &
 |   and work on measures to secure it.
 |
 |
 |[+] Robust-ness
 | |
 | |[+] a software/service is as robust as much
 | |  it can withstand the abrupt, non-workflow
 | |  behavior from users and still work in a
 | |  desired secure way
 | |_
 |
 |[+] Vulnerability
 | |Any element of a service/software/technology
 | | compromising it's security parameters.
 | | 
 | |[+] Mainly Two Types
 | | |
 | | |[+] Design-Level
 | | | |
 | | | |[+] flaw in architecture of a software
 | | | |  or protocol of a service.
 | | | |_
 | | | 
 | | |[+] Code-Level
 | | | |
 | | | |[+] incompetency i.e. logical loopholes
 | | | |  in "code" leading to "potential threats"
 | | | |
 | | | |[+] incapability i.e. an inherited flaw
 | | | |  from compiler/framework/library used
 | | | |  which is "present vulnerability" in code
 | | | |_
 | | |
 | | |[+] Implementation-Level
 | | | |
 | | | |[+] a robust software/service implemented
 | | | |  without adhering to the security guidelines,
 | | | |  still enables Hackers to exploit it.
 | | | |_
 | | |_
 | |_
 |
 |[+] Threat Model
 | |
 | |[+] Identify vulnerabilities in existing system
 | |
 | |[+] Predict possible threats related to Target
 | |_
 |
 |[+] Exploit
 | |
 | |[+] A Proof-of-Concept exploiting Threat Model
 | |_
 |_
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
other important terms used in this tutorial can be
referenced from the [=> Appendix => Terminology]
